[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "self-healing-infra-monitor"
version = "1.0.0"
description = "AI-powered self-healing infrastructure monitor using MCP and Google ADK"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
keywords = ["mcp", "adk", "infrastructure", "monitoring", "ai", "agents", "sre", "devops"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
]

dependencies = [
    # MCP Server
    "mcp>=0.9.0",
    "fastmcp>=0.1.0",
    
    # Google ADK
    "google-genai>=0.3.0",
    
    # Data validation and models
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Configuration
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    
    # AWS Integration
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    
    # Kubernetes Integration
    "kubernetes>=28.1.0",
    
    # Prometheus Integration
    "prometheus-client>=0.19.0",
    "prometheus-api-client>=0.5.3",
    
    # Database
    "sqlalchemy>=2.0.0",
    "aiosqlite>=0.19.0",
    
    # HTTP and async
    "httpx>=0.26.0",
    "aiohttp>=3.9.0",
    "anyio>=4.2.0",
    
    # Logging and monitoring
    "structlog>=24.1.0",
    "colorlog>=6.8.0",
    
    # Utilities
    "click>=8.1.0",
    "rich>=13.7.0",
    "python-json-logger>=2.0.7",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=24.1.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

all = [
    "self-healing-infra-monitor[dev,docs]",
]

[project.urls]
Homepage = "https://github.com/yourusername/self-healing-infra-monitor"
Documentation = "https://github.com/yourusername/self-healing-infra-monitor/docs"
Repository = "https://github.com/yourusername/self-healing-infra-monitor"
Issues = "https://github.com/yourusername/self-healing-infra-monitor/issues"

[project.scripts]
shim = "src.mcp_server.server:main"
shim-server = "src.mcp_server.server:main"
shim-orchestrator = "src.orchestrator.workflow:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
namespaces = false

[tool.setuptools.package-data]
"src.adk_agents.prompts" = ["*.txt"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "aws: Tests requiring AWS credentials",
    "k8s: Tests requiring Kubernetes cluster",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | \.eggs
  | \.tox
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]


[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "kubernetes.*",
    "prometheus_client.*",
    "google.genai.*",
]
ignore_missing_imports = true
